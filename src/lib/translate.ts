import type { AlphabetName, Alphabets } from "../types.ts";

const alphabets: Alphabets = {
  prudeus: {
    а: "a",
    б: "b",
    в: "v",
    г: "g",
    ґ: "ĝ",
    д: "d",
    е: "e",
    є: "je",
    ж: "ž",
    з: "z",
    и: "y",
    і: "i",
    ї: "ji",
    й: "j",
    к: "k",
    л: "l",
    м: "m",
    н: "n",
    о: "o",
    п: "p",
    р: "r",
    с: "s",
    т: "t",
    у: "u",
    ф: "f",
    х: "h",
    ц: "с",
    ч: "č",
    ш: "š",
    щ: "šč",
    ь: "'",
    ю: "ju",
    я: "ja",
  },
  passport: {
    а: "a",
    б: "b",
    в: "v",
    г: "h",
    ґ: "g",
    д: "d",
    е: "e",
    є: { start: "ye", other: "ie" },
    ж: "zh",
    з: "z",
    и: "y",
    і: "i",
    ї: { start: "yi", other: "i" },
    й: { start: "y", other: "i" },
    к: "k",
    л: "l",
    м: "m",
    н: "n",
    о: "o",
    п: "p",
    р: "r",
    с: "s",
    т: "t",
    у: "u",
    ф: "f",
    х: "kh",
    ц: "ts",
    ч: "ch",
    ш: "sh",
    щ: "shch",
    ь: "",
    ю: { start: "yu", other: "iu" },
    я: { start: "ya", other: "ia" },
    "'": "",
  },
  geography: {
    а: "a",
    б: "b",
    в: "v",
    г: "h",
    ґ: "g",
    д: "d",
    е: "e",
    є: { start: "ye", other: "ie" },
    ж: "zh",
    з: "z",
    и: "y",
    і: "i",
    ї: { start: "yi", other: "i" },
    й: { start: "y", other: "i" },
    к: "k",
    л: "l",
    м: "m",
    н: "n",
    о: "o",
    п: "p",
    р: "r",
    с: "s",
    т: "t",
    у: "u",
    ф: "f",
    х: "kh",
    ц: "ts",
    ч: "ch",
    ш: "sh",
    щ: "sch",
    ь: "'",
    ю: { start: "yu", other: "iu" },
    я: { start: "ya", other: "ia" },
  },
  iso9: {
    а: "a",
    б: "b",
    в: "v",
    г: "h",
    ґ: "ģ",
    д: "d",
    е: "e",
    є: "ê",
    ж: "ž",
    з: "z",
    и: "i",
    і: "ì",
    ї: "ї",
    й: "j",
    к: "k",
    л: "l",
    м: "m",
    н: "n",
    о: "o",
    п: "p",
    р: "r",
    с: "s",
    т: "t",
    у: "u",
    ф: "f",
    х: "h",
    ц: "c",
    ч: "č",
    ш: "š",
    щ: "šč",
    ь: "´",
    ю: "û",
    я: "â",
  },
};
export const translate = (text: string, alphabetName: AlphabetName) => {
  const alphabet = alphabets[alphabetName];
  const chars = text.split("");
  const translatedChars = chars.map((char, index, self) => {
    const isStartOfWord = !/\p{L}/u.test(self[index - 1]);
    const lowerCaseChar = char.toLowerCase();
    const traslatedChar = alphabet[lowerCaseChar];
    if (traslatedChar === undefined) return char;
    const traslatedCharValue = typeof traslatedChar === "string"
      ? traslatedChar
      : isStartOfWord
      ? traslatedChar.start
      : traslatedChar.other;
    if (char === lowerCaseChar) return traslatedCharValue;
    if (traslatedCharValue.length === 1) return traslatedCharValue.toUpperCase();
    return traslatedCharValue[0].toUpperCase() +
      traslatedCharValue.slice(1, traslatedCharValue.length + 1);
  });
  return translatedChars.join("");
};
